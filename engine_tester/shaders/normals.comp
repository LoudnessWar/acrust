layout(std430, binding = 0) buffer VertexBuffer {
    vec3 vertices[];
};

layout(std430, binding = 1) buffer IndexBuffer {
    uint indices[];
};

layout(std430, binding = 2) buffer NormalBuffer {
    vec3 normals[];
};

layout(local_size_x = 64) in;

void main() {
    uint group_idx = gl_GlobalInvocationID.x;
    uint base_idx = group_idx * 3;
    
    if (base_idx + 2 >= indices.length()) return;
    
    // Get indices for this triangle
    uint i0 = indices[base_idx];
    uint i1 = indices[base_idx + 1];
    uint i2 = indices[base_idx + 2];
    
    // Get vertices
    vec3 v0 = vertices[i0];
    vec3 v1 = vertices[i1];
    vec3 v2 = vertices[i2];
    
    // Calculate normal (cross product of edges)
    vec3 edge1 = v1 - v0;
    vec3 edge2 = v2 - v0;
    vec3 normal = normalize(cross(edge1, edge2));
    
    // Accumulate normals (atomic operations for shared vertices)
    atomicAdd(normals[i0].x, normal.x);
    atomicAdd(normals[i0].y, normal.y);
    atomicAdd(normals[i0].z, normal.z);
    // Repeat for i1 and i2...
}