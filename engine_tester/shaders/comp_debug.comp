#version 430 core
layout(local_size_x = 16, local_size_y = 16) in;

struct Light {
    vec3 position;
    float radius;
    vec3 color;
    float intensity;
};

struct VisibleIndex {
    int index;
};

layout(std430, binding = 0) buffer LightBuffer {
    Light lights[];
} lightBuffer;

layout(std430, binding = 2) writeonly buffer VisibleLightIndicesBuffer {
    VisibleIndex data[];
} IndicesBuffer;

layout(binding = 3, rgba32f) writeonly uniform image2D debugImage;

uniform sampler2D u_depthTexture;
uniform mat4 view;
uniform mat4 projection;
uniform int u_lightCount;
uniform float u_screenWidth;
uniform float u_screenHeight;

shared uint minDepthInt; 
shared uint maxDepthInt;
shared uint visibleLightCount;
shared int visibleLightIndices[256];

#define TILE_SIZE 16
const uint MAX_LIGHTS_PER_TILE = 256;

bool sphereIntersectsAABB(vec3 center, float radius, vec3 aabbMin, vec3 aabbMax) {
    // Calculate squared distance between sphere center and AABB
    float dist2 = 0.0;
    
    for (int i = 0; i < 3; ++i) {
        float v = center[i];
        if (v < aabbMin[i]) {
            dist2 += (aabbMin[i] - v) * (aabbMin[i] - v);
        } else if (v > aabbMax[i]) {
            dist2 += (v - aabbMax[i]) * (v - aabbMax[i]);
        }
    }
    
    return dist2 <= (radius * radius);
}

void main() {
    // Get tile coordinates
    uvec2 tileID = gl_WorkGroupID.xy;
    ivec2 location = ivec2(gl_GlobalInvocationID.xy);
    ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
    uint index = tileID.y * tileNumber.x + tileID.x;

    // Initialize shared values
    if (gl_LocalInvocationIndex == 0) {
        minDepthInt = 0xFFFFFFFF;
        maxDepthInt = 0;
        visibleLightCount = 0;
    }
    
    barrier();

    // Find min/max depth in this tile
    vec2 uv = vec2(location) / vec2(u_screenWidth, u_screenHeight);
    float depth = texture(u_depthTexture, uv).r;
    
    // Linearize depth
    float linearDepth = (0.5 * projection[3][2]) / (depth + 0.5 * projection[2][2] - 0.5);
    
    // Convert to uint for atomic operations
    uint depthInt = floatBitsToUint(linearDepth);
    atomicMin(minDepthInt, depthInt);
    atomicMax(maxDepthInt, depthInt);
    
    barrier();
    
    // Get min/max depth
    float minDepth = uintBitsToFloat(minDepthInt);
    float maxDepth = uintBitsToFloat(maxDepthInt);
    
    // Calculate tile size in UV space
    vec2 tileSizeUV = vec2(TILE_SIZE) / vec2(u_screenWidth, u_screenHeight);
    vec2 tileMinUV = vec2(tileID) * tileSizeUV;
    vec2 tileMaxUV = tileMinUV + tileSizeUV;
    
    // Convert to NDC space (-1 to 1)
    vec2 ndcMin = tileMinUV * 2.0 - 1.0;
    vec2 ndcMax = tileMaxUV * 2.0 - 1.0;
    
    // Compute the inverse of projection-view matrix once
    mat4 invProjView = inverse(projection * view);
    
    // Construct frustum corners in world space
    vec4 corners[8];
    vec3 aabbMin = vec3(1e30);
    vec3 aabbMax = vec3(-1e30);
    
    // Near plane corners (using min depth)
    float ndcMinDepth = 2.0 * depth - 1.0; // Original depth in NDC space
    
    corners[0] = invProjView * vec4(ndcMin.x, ndcMin.y, ndcMinDepth, 1.0); // bottom-left
    corners[1] = invProjView * vec4(ndcMax.x, ndcMin.y, ndcMinDepth, 1.0); // bottom-right
    corners[2] = invProjView * vec4(ndcMin.x, ndcMax.y, ndcMinDepth, 1.0); // top-left
    corners[3] = invProjView * vec4(ndcMax.x, ndcMax.y, ndcMinDepth, 1.0); // top-right
    
    // Far plane corners (using max depth)
    float ndcMaxDepth = 2.0 * maxDepth - 1.0;
    
    corners[4] = invProjView * vec4(ndcMin.x, ndcMin.y, ndcMaxDepth, 1.0);
    corners[5] = invProjView * vec4(ndcMax.x, ndcMin.y, ndcMaxDepth, 1.0);
    corners[6] = invProjView * vec4(ndcMin.x, ndcMax.y, ndcMaxDepth, 1.0);
    corners[7] = invProjView * vec4(ndcMax.x, ndcMax.y, ndcMaxDepth, 1.0);
    
    // Apply homogeneous division and compute AABB
    for (int i = 0; i < 8; i++) {
        corners[i].xyz /= corners[i].w;
        aabbMin = min(aabbMin, corners[i].xyz);
        aabbMax = max(aabbMax, corners[i].xyz);
    }
    
    // Process lights
    uint threadCount = TILE_SIZE * TILE_SIZE;
    uint passCount = (u_lightCount + threadCount - 1) / threadCount;
    
    for (uint i = 0; i < passCount; ++i) {
        uint lightIndex = i * threadCount + gl_LocalInvocationIndex;
        if (lightIndex >= u_lightCount) break;
        
        vec3 pos = lightBuffer.lights[lightIndex].position;
        float radius = lightBuffer.lights[lightIndex].radius;
        
        if (sphereIntersectsAABB(pos, radius, aabbMin, aabbMax)) {
            uint offset = atomicAdd(visibleLightCount, 1);
            if (offset < MAX_LIGHTS_PER_TILE) {
                visibleLightIndices[offset] = int(lightIndex);
            }
        }
    }
    
    barrier();
    
    // Write results to global buffers
    if (gl_LocalInvocationIndex == 0) {
        uint offset = index * MAX_LIGHTS_PER_TILE;
        
        for (uint i = 0; i < visibleLightCount && i < MAX_LIGHTS_PER_TILE; ++i) {
            IndicesBuffer.data[offset + i].index = visibleLightIndices[i];
        }
        
        if (visibleLightCount < MAX_LIGHTS_PER_TILE) {
            IndicesBuffer.data[offset + visibleLightCount].index = -1;
        }
        
        // Visual debug: Write to debug image
        float normalizedCount = float(visibleLightCount) / float(16);
        vec4 debugColor = vec4(
            normalizedCount,
            float(tileID.x) / float(tileNumber.x),
            float(tileID.y) / float(tileNumber.y),
            1.0
        );
        
        imageStore(debugImage, ivec2(tileID), debugColor);
    }
}