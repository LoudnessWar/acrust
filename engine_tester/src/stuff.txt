pub struct Light {
    pub position: [f32; 3],
    pub radius: f32,
}

pub struct LightManager {
    pub lights: Vec<Light>,
    pub depth_texture: Option<depthTexture>,
    pub tile_light_indices: Vec<Vec<usize>>, // per-tile light indices
}

impl LightManager {
    pub fn new() -> Self {
        Self {
            lights: vec![],
            depth_texture: None,
            tile_light_indices: vec![],
        }
    }

    pub fn get_depth_texture(&self) -> &depthTexture {
        self.depth_texture.as_ref().expect("Depth texture not set")
    }

    pub fn set_depth_texture(&mut self, texture: depthTexture) {
        self.depth_texture = Some(texture);
    }

    pub fn cpu_tile_light_culling(&mut self, screen_width: u32, screen_height: u32) {
        let tile_size = 16;
        let tiles_x = (screen_width + tile_size - 1) / tile_size;
        let tiles_y = (screen_height + tile_size - 1) / tile_size;
        let num_tiles = (tiles_x * tiles_y) as usize;

        self.tile_light_indices = vec![vec![]; num_tiles];

        for (light_index, light) in self.lights.iter().enumerate() {
            let light_screen_x = (light.position[0] / screen_width as f32 * tiles_x as f32) as u32;
            let light_screen_y = (light.position[1] / screen_height as f32 * tiles_y as f32) as u32;

            for ty in 0..tiles_y {
                for tx in 0..tiles_x {
                    let tile_index = (ty * tiles_x + tx) as usize;
                    // Fake AABB check (placeholder)
                    let tile_center_x = (tx * tile_size + tile_size / 2) as f32;
                    let tile_center_y = (ty * tile_size + tile_size / 2) as f32;

                    let dx = light.position[0] - tile_center_x;
                    let dy = light.position[1] - tile_center_y;
                    let dist2 = dx * dx + dy * dy;

                    if dist2 < light.radius * light.radius {
                        self.tile_light_indices[tile_index].push(light_index);
                    }
                }
            }
        }
    }
}